import org.joda.time.DateTime

// Value to customize
var int OpenWindowDeltaTemp = 2
var int  OpenWindowDeltaTime = 5
 
// Initialize value not no history found
var int AutoStartAMInit = 5
var int AutoStopAMInit = 9
var int AutoStartPMInit = 18
var int AutoStopPMInit = 23
var int SdbStartCamilleInit = 6
var int SdbStartAdrienInit = 8
var int SdbLenghtInit = 1
var int TempTargetedSalonInit = 200
var int TempTargetedChambreInit = 190
var int TempTargetedBureauInit = 190

var Timer masterAlarmTime = null

//Initialization
var String SalonModeChauff = "UNKNOWN"
var String ChambreModeChauff = "UNKNOWN"
var String BureauModeChauff = "UNKNOWN"
var String SdbModeChauff = "UNKNOWN"
var String SdbBalModeChauff = "UNKNOWN"
var int HeaterTime = 0
var int HeaterSdbTime = 0

var int ButtonInProgress = 0
var Timer timerHeat = null

//var DateTime SalonLastUpdateSensorTime = null
//var DateTime ChambreLastUpdateSensorTime = null
//var DateTime BureauLastUpdateSensorTime = null
//var DateTime ConsoLastUpdateSensorTime = null
//var DateTime WeatherLastUpdateSensorTime = null

val Functions$Function6<SwitchItem,NumberItem,String,NumberItem,String,Number,void> TempSensorChanged = [
    SwitchItem TempSwitch,
    NumberItem  TempSensor,
    String ModeChauff,
    NumberItem TempTargeted, 
    String LogName,
	Number HeaterTime |
    
    var Number nTempTargeted = 0
    if(TempTargeted.state instanceof DecimalType) nTempTargeted = TempTargeted.state as DecimalType 
     
	if (ModeChauff == "UNKNOWN") {
		logWarn(LogName, "We don't know the state so do nothing")
	} else if (ModeChauff == "OFF") {
		logInfo(LogName, "Heater is force to OFF")
		sendCommand(TempSwitch,"OFF")
	} else if (ModeChauff == "ON") {
		logInfo(LogName, "Heater is force to ON")
		sendCommand(TempSwitch,"ON")
	} else if (ModeChauff == "CONF") {
		if (TempSensor.state <= ((nTempTargeted/10) - 0.25)) {
			logInfo(LogName, "The temperature ("+TempSensor.state+") is bellow " + ((nTempTargeted/10) - 0.25) + ". Let's turn ON")
			sendCommand(TempSwitch,"ON")
		} else if (TempSensor.state >= ((nTempTargeted/10) + 0.25)) {
			logInfo(LogName, "The temperature ("+TempSensor.state+") is upper " + ((nTempTargeted/10) + 0.25) + ". Let's turn OFF")
			sendCommand(TempSwitch,"OFF")
		} else {
			logInfo(LogName, "The temperature ("+TempSensor.state+") is around " + (nTempTargeted/10) + ". Let's wait and see")
		}
	} else if (ModeChauff == "AUTO"){
	    var boolean SomeoneIn = false
	    var Number MaxMoveSensor = SalonMoveSensor.maximumSince(now.minusHours(3)).state as DecimalType
	    if (MaxMoveSensor == 1) {
	    	SomeoneIn = true;
	    }
		if ((HeaterTime == 2) || ((HeaterTime == 3) && SomeoneIn)) {
			if (TempSensor.state <= ((nTempTargeted/10) - 0.25)) {
				logInfo(LogName, "The temperature ("+TempSensor.state+") is bellow " + ((nTempTargeted/10) - 0.25) + ", TimeRule="+HeaterTime+", PresenceRule="+SomeoneIn+". Let's turn ON")
				sendCommand(TempSwitch,"ON")
			} else if (TempSensor.state >= ((nTempTargeted/10) + 0.25)) {
				logInfo(LogName, "The temperature ("+TempSensor.state+") is upper " + ((nTempTargeted/10) + 0.25) + ", TimeRule="+HeaterTime+", PresenceRule="+SomeoneIn+". Let's turn OFF")
				sendCommand(TempSwitch,"OFF")
			} else {
				logInfo(LogName, "The temperature ("+TempSensor.state+") is around " + (nTempTargeted/10) + ", TimeRule="+HeaterTime+", PresenceRule="+SomeoneIn+". Let's wait and see")
			}
		} else {
			logInfo(LogName, "Lets turn OFF. TimeRule="+HeaterTime+", PresenceRule="+SomeoneIn)
			sendCommand(TempSwitch,"OFF")					
		}
	} else {
		logWarn(LogName, "We are in state that we don't handle: "+ModeChauff)			
	}			
	return null
]

val Functions$Function3<SwitchItem,String,String,void> SimpleChange = [
    SwitchItem TempSwitch,
    String ModeChauff, 
    String LogName |
     
	if (ModeChauff == "UNKNOWN") {
		logWarn(LogName, "We don't know the state so do nothing")
	} else if (ModeChauff == "OFF") {
		logInfo(LogName, "Heater is force to OFF")
		sendCommand(TempSwitch,"OFF")
	} else if (ModeChauff == "ON") {
		logInfo(LogName, "Heater is force to ON")
		sendCommand(TempSwitch,"ON")
	} else {
		logWarn(LogName, "We are in state that we don't handle: "+ModeChauff)			
	}
	return null		
]

val Functions$Function4<SwitchItem,String,String,Number,void> SdbHeaterChange = [
    SwitchItem TempSwitch,
    String ModeChauff, 
    String LogName,
	Number HeaterSdbTime |
     
	if (ModeChauff == "UNKNOWN") {
		logWarn(LogName, "We don't know the state so do nothing")
	} else if (ModeChauff == "OFF") {
		logInfo(LogName, "Heater is force to OFF")
		sendCommand(TempSwitch,"OFF")
	} else if (ModeChauff == "ON") {
		logInfo(LogName, "Heater is force to ON")
		sendCommand(TempSwitch,"ON")
	} else if (ModeChauff == "AUTO"){
	    if (HeaterSdbTime == 1) {
			logInfo(LogName, "The time to start the SDB heater. Let's turn ON")
			sendCommand(TempSwitch,"ON")
		} else if (HeaterSdbTime == 0) {
			logInfo(LogName, "The time to stop the SDB heater. Let's turn OFF")
			sendCommand(TempSwitch,"OFF")
		} else {
			logWarn(LogName, "We are in heater Sdb Time that we don't handle: "+HeaterSdbTime)		
		}
	} else {
		logWarn(LogName, "We are in state that we don't handle: "+ModeChauff)			
	}	
	return null		
]

rule "Initialize the system"
	when 
		System started
	then
		if (SalonRadModeSwitch.previousState !== null) {
			postUpdate(SalonRadModeSwitch, SalonRadModeSwitch.previousState.getState())
		}
		switch(SalonRadModeSwitch.state) {
			case 0 : SalonModeChauff = "OFF"
			case 1 : SalonModeChauff = "ON"
			case 2 : SalonModeChauff = "CONF"
			case 3 : SalonModeChauff = "AUTO"
			default: SalonModeChauff = "OFF"
		}
		TempSensorChanged.apply(SalonTempSwitch, SalonTempSensor, SalonModeChauff, TargetedTempSalon, "TempManagerSalon", HeaterTime)
		logInfo("InitDefaultValue", "Initialize the SalonModeChauff mode to " + SalonModeChauff)
		
		if (ChambreRadModeSwitch.previousState !== null) {
			postUpdate(ChambreRadModeSwitch, ChambreRadModeSwitch.previousState.getState())	
		}
		switch(ChambreRadModeSwitch.state) {
			case 0 : ChambreModeChauff = "OFF"
			case 1 : ChambreModeChauff = "ON"
			case 2 : ChambreModeChauff = "CONF"
			case 3 : ChambreModeChauff = "AUTO"
			default: ChambreModeChauff = "OFF"
		}
		TempSensorChanged.apply(ChambreTempSwitch, XiaomiAqaraTHPSensor_Temperature2, ChambreModeChauff, TargetedTempChambre, "TempManagerChambre", HeaterTime)
		logInfo("InitDefaultValue", "Initialize the ChambreModeChauff mode to " + ChambreModeChauff)
		
		if (BureauRadModeSwitch.previousState !== null) {
			postUpdate(BureauRadModeSwitch, BureauRadModeSwitch.previousState.getState())	
		}
		switch(BureauRadModeSwitch.state) {
			case 0 : BureauModeChauff = "OFF"
			case 1 : BureauModeChauff = "ON"
			case 2 : BureauModeChauff = "CONF"
			case 3 : BureauModeChauff = "AUTO"
			default: BureauModeChauff = "OFF"
		}
		TempSensorChanged.apply(BureauTempSwitch, XiaomiAqaraTHPSensor_Temperature, BureauModeChauff, TargetedTempBureau, "TempManagerBureau", HeaterTime)
		logInfo("InitDefaultValue", "Initialize the BureauModeChauff mode to " + BureauModeChauff)
		
		if (SdbRadModeSwitch.previousState !== null) {
			postUpdate(SdbRadModeSwitch, SdbRadModeSwitch.previousState.getState())	
		}
		switch(SdbRadModeSwitch.state) {
			case 0 : SdbModeChauff = "OFF"
			case 1 : SdbModeChauff = "ON"
			case 2 : SdbModeChauff = "CONF"
			case 3 : SdbModeChauff = "AUTO"
			default: SdbModeChauff = "OFF"
		}
		SdbHeaterChange.apply(SdbTempSwitch, SdbModeChauff, "TempManagerSdb",HeaterSdbTime)
		logInfo("InitDefaultValue", "Initialize the SdbModeChauff mode to " + SdbModeChauff)
		
		if (SdbBalModeSwitch.previousState !== null) {
			postUpdate(SdbBalModeSwitch, SdbBalModeSwitch.previousState.getState())	
		}
		switch(SdbBalModeSwitch.state) {
			case 0 : SdbBalModeChauff = "OFF"
			case 1 : SdbBalModeChauff = "ON"
			case 2 : SdbBalModeChauff = "CONF"
			case 3 : SdbBalModeChauff = "AUTO"
			default: SdbBalModeChauff = "OFF"
		}
		SimpleChange.apply(SdbBalSwitch, SdbBalModeChauff, "TempManagerSdbBal")
		logInfo("InitDefaultValue", "Initialize the SdbBalModeChauff mode to " + SdbBalModeChauff)
		
		if (Alarm_Master.previousState !== null) {
			postUpdate(Alarm_Master, Alarm_Master.previousState.getState())	
		}
		logInfo("InitDefaultValue", "Initialize the Alarm_Master mode to " + Alarm_Master.state)
		
		
		if (TargetedTempSalon.previousState !== null) {
			postUpdate(TargetedTempSalon, TargetedTempSalon.previousState.getState())
		} else {
			postUpdate(TargetedTempSalon, TempTargetedSalonInit)
		}
		logInfo("InitDefaultValue", "Initialize Temperature salon " + TargetedTempSalon.state)
		if (TargetedTempChambre.previousState !== null) {
			postUpdate(TargetedTempChambre, TargetedTempChambre.previousState.getState())
		} else {
			postUpdate(TargetedTempChambre, TempTargetedChambreInit)
		}
		logInfo("InitDefaultValue", "Initialize Temperature chambre " + TargetedTempChambre.state)
		if (TargetedTempBureau.previousState !== null) {
			postUpdate(TargetedTempBureau, TargetedTempBureau.previousState.getState())
		} else {
			postUpdate(TargetedTempBureau, TempTargetedBureauInit)
		}
		logInfo("InitDefaultValue", "Initialize Temperature bureau " + TargetedTempBureau.state)	
		//if (SdbBalReport.previousState !== null) {
		//	postUpdate(SdbBalReport, SdbBalReport.previousState.getState())
		//}
		postUpdate(SdbBalReport, 0)
		logInfo("InitDefaultValue", "Initialize Ballon report: " + SdbBalReport.state)
		
		
		if(AutoStartAM.previousState !== null) {postUpdate(AutoStartAM, AutoStartAM.previousState.getState())} else {postUpdate(AutoStartAM, AutoStartAMInit)}      
		logInfo("InitDefaultValue", "Initialize Start AM " + AutoStartAM.state)
		if(AutoStopAM.previousState !== null) {postUpdate(AutoStopAM, AutoStopAM.previousState.getState())} else {postUpdate(AutoStopAM, AutoStopAMInit)}      
		logInfo("InitDefaultValue", "Initialize Stop AM " + AutoStopAM.state)
		if(AutoStartPM.previousState !== null) {postUpdate(AutoStartPM, AutoStartPM.previousState.getState())} else {postUpdate(AutoStartPM, AutoStartPMInit)}      
		logInfo("InitDefaultValue", "Initialize Start PM " + AutoStartPM.state)
		if(AutoStopPM.previousState !== null) {postUpdate(AutoStopPM, AutoStopPM.previousState.getState())} else {postUpdate(AutoStopPM, AutoStopPMInit)}      	
		logInfo("InitDefaultValue", "Initialize Stop PM " + AutoStopPM.state)		
		if(SdbStartCamille.previousState !== null) {postUpdate(SdbStartCamille, SdbStartCamille.previousState.getState())} else {postUpdate(SdbStartCamille, SdbStartCamilleInit)}      	
		logInfo("InitDefaultValue", "Initialize Camille Sdb " + SdbStartCamille.state)		
		if(SdbStartAdrien.previousState !== null) {postUpdate(SdbStartAdrien, SdbStartAdrien.previousState.getState())} else {postUpdate(SdbStartAdrien, SdbStartAdrienInit)}      	
		logInfo("InitDefaultValue", "Initialize Adrien Sdb " + SdbStartAdrien.state)		
		if(SdbLenght.previousState !== null) {postUpdate(SdbLenght, SdbLenght.previousState.getState())} else {postUpdate(SdbLenght, SdbLenghtInit)}      	
		logInfo("InitDefaultValue", "Initialize Lenght Sdb " + SdbLenght.state)		
		
		///////////////////// JUST A COPY OF THE TIME RULE
       	// Prepare the timer
        var int nAutoStartAM
        var int nAutoStopAM
        var int nAutoStartPM
        var int nAutoStopPM
        var int nSdbStartCamille
        var int nSdbStartAdrien
        var int nSdbLenght
		if(AutoStartAM.state instanceof DecimalType) {nAutoStartAM = (AutoStartAM.state as DecimalType).intValue()} else {nAutoStartAM = AutoStartAMInit}      
        if(AutoStopAM.state instanceof DecimalType) {nAutoStopAM = (AutoStopAM.state as DecimalType).intValue()} else {nAutoStopAM = AutoStopAMInit}        
        if(AutoStartPM.state instanceof DecimalType) {nAutoStartPM = (AutoStartPM.state as DecimalType).intValue()} else {nAutoStartPM = AutoStartPMInit}   
        if(AutoStopPM.state instanceof DecimalType) {nAutoStopPM = (AutoStopPM.state as DecimalType).intValue()} else {nAutoStopPM = AutoStopPMInit}        
		if(SdbStartCamille.state instanceof DecimalType) {nSdbStartCamille = (SdbStartCamille.state as DecimalType).intValue()} else {nSdbStartCamille = SdbStartCamilleInit} 
		if(SdbStartAdrien.state instanceof DecimalType) {nSdbStartAdrien = (SdbStartAdrien.state as DecimalType).intValue()} else {nSdbStartAdrien = SdbStartAdrienInit} 
		if(SdbLenght.state instanceof DecimalType) {nSdbLenght = (SdbLenght.state as DecimalType).intValue()} else {nSdbLenght = SdbLenghtInit} 
         
             
        var DateTime TimeDay = parse(now.getYear() + "-" + now.getMonthOfYear() + "-" + now.getDayOfMonth() + "T00:00")
        var DateTime StartTimeAM = TimeDay.plusHours(nAutoStartAM)
        var DateTime EndTimeAM = TimeDay.plusHours(nAutoStopAM)
        var DateTime StartTimePM = TimeDay.plusHours(nAutoStartPM)
        var DateTime EndTimePM = TimeDay.plusHours(nAutoStopPM)
        var DateTime StartSdbCamille = TimeDay.plusHours(nSdbStartCamille)
        var DateTime StopSdbCamille = StartSdbCamille.plusHours(nSdbLenght)
        var DateTime StartSdbAdrien = TimeDay.plusHours(nSdbStartAdrien)
        var DateTime StopSdbAdrien = StartSdbAdrien.plusHours(nSdbLenght)
        logInfo("AutoManager", "StartSdbCamille: " + StartSdbCamille)	
        logInfo("AutoManager", "StopSdbCamille: " + StopSdbCamille)	
        logInfo("AutoManager", "StartSdbAdrien: " + StartSdbAdrien)	
        logInfo("AutoManager", "StopSdbAdrien: " + StopSdbAdrien)	
        
		// Detect which time slot we are right now
        if (EndTimePM.beforeNow) {
			logInfo("AutoManager", "It's super late.")
        	HeaterTime = 1       
        } else if (StartTimePM.beforeNow && EndTimePM.afterNow) {
			logInfo("AutoManager", "It's evening.")
        	HeaterTime = 2        	
        } else if (EndTimeAM.beforeNow && StartTimePM.afterNow) {
			logInfo("AutoManager", "It's after noon.")
    		HeaterTime = 3             	
        } else if (StartTimeAM.beforeNow && EndTimeAM.afterNow) {
			logInfo("AutoManager", "It's morning.")
        	HeaterTime = 2        	
        } else if (StartTimeAM.afterNow) {
			logInfo("AutoManager", "It's super early.")
        	HeaterTime = 1 	
        } else {
			logWarn("AutoManager", "Can't found the current hour action")
        }
        
        if (StartSdbCamille.beforeNow && StopSdbCamille.afterNow) {
			logInfo("AutoManager", "It's Sdb Camille Time.")
        	HeaterSdbTime = 1      	
        } else if (StartSdbAdrien.beforeNow && StopSdbAdrien.afterNow) {
			logInfo("AutoManager", "It's Sdb Adrien Time.")
    		HeaterSdbTime = 1          	
        } else {
		logInfo("AutoManager", "It's NOT Sdb Time.")
        	HeaterSdbTime = 0
        }
		//////////////////////////////////////////////////
		
		TempSensorChanged.apply(SalonTempSwitch, SalonTempSensor, SalonModeChauff, TargetedTempSalon, "TempManagerSalon", HeaterTime)
		TempSensorChanged.apply(ChambreTempSwitch, XiaomiAqaraTHPSensor_Temperature2, ChambreModeChauff, TargetedTempChambre, "TempManagerChambre", HeaterTime)
		TempSensorChanged.apply(BureauTempSwitch, XiaomiAqaraTHPSensor_Temperature, BureauModeChauff, TargetedTempBureau, "TempManagerBureau", HeaterTime)
		SdbHeaterChange.apply(SdbTempSwitch, SdbModeChauff, "TempManagerSdb",HeaterSdbTime)
		SimpleChange.apply(SdbBalSwitch, SdbBalModeChauff, "TempManagerSdbBal")
		
end

rule "Temperature Salon change"
	when
		Item SalonTempSensor changed
	then
//		SalonLastUpdateSensorTime = now
	  	postUpdate(SalonLastUpdateSensor, new DateTimeType())
		if (SalonTempSensor.deltaSince(now.minusMinutes(OpenWindowDeltaTime)) as Number > OpenWindowDeltaTemp) {
			logWarn("TempManagerSalon", "Temperature changed more than "+ OpenWindowDeltaTemp +" C in "+OpenWindowDeltaTime+" mins. Stop heater")
			sendCommand(SalonTempSwitch,"OFF")
		} else {
			TempSensorChanged.apply(SalonTempSwitch, SalonTempSensor, SalonModeChauff, TargetedTempSalon, "TempManagerSalon", HeaterTime)
		}
end

rule "Somone in change"
	when
		Item SalonMoveSensor changed
	then
		//logInfo("MoveSensor", "We moved, Start Led and TV")
		ZWaveNode5FGWP102MeteredWallPlugSwitch_Switch.sendCommand(ON)

		if(HeaterTime == 1 && XiaomiMiSmartHomeGateway_Brightness.state == 0)
		{
			sendCommand("XiaomiMiSmartHomeGateway_Color", "240,100,50") //HSL
			sendCommand("XiaomiMiSmartHomeGateway_Brightness", "50")
		}
end

rule "Temperature Chambre change"
	when
		Item XiaomiAqaraTHPSensor_Temperature2 changed
	then
//		ChambreLastUpdateSensorTime = now
		postUpdate(ChambreLastUpdateSensor, new DateTimeType())
		if (XiaomiAqaraTHPSensor_Temperature2.deltaSince(now.minusMinutes(OpenWindowDeltaTime)) as Number > OpenWindowDeltaTemp) {
			logWarn("TempManagerChambre", "Temperature changed more than "+ OpenWindowDeltaTemp +" C in "+OpenWindowDeltaTime+" mins. Stop heater")
			sendCommand(ChambreTempSwitch,"OFF")
		} else {
			TempSensorChanged.apply(ChambreTempSwitch, XiaomiAqaraTHPSensor_Temperature2, ChambreModeChauff, TargetedTempChambre, "TempManagerChambre", HeaterTime)
		}
end

rule "Temperature Bureau change"
	when
		Item XiaomiAqaraTHPSensor_Temperature changed
	then
//		BureauLastUpdateSensorTime = now
		postUpdate(BureauLastUpdateSensor, new DateTimeType())
		if (XiaomiAqaraTHPSensor_Temperature.deltaSince(now.minusMinutes(OpenWindowDeltaTime)) as Number > OpenWindowDeltaTemp) {
			logWarn("TempManagerBureau", "Temperature changed more than "+ OpenWindowDeltaTemp +" C in "+OpenWindowDeltaTime+" mins. Stop heater")
			sendCommand(BureauTempSwitch,"OFF")
		} else {
			TempSensorChanged.apply(BureauTempSwitch, XiaomiAqaraTHPSensor_Temperature, BureauModeChauff, TargetedTempBureau, "TempManagerBureau", HeaterTime)
		}
end

rule "Records last weather update time"
when
  Item Weather_Temperatureopenweather received update
then
//	WeatherLastUpdateSensorTime = now
	postUpdate(Weather_LastUpdateopenweather, new DateTimeType())
end

rule "Records last AppartConsoSensor update time"
when
  Item AppartConsoSensor received update
then
//	ConsoLastUpdateSensorTime = now
  	postUpdate(ConsoLastUpdateSensor, new DateTimeType())
end


rule "Mode Chauffage Salon"
	when
		Item SalonRadModeSwitch received command
	then
		switch(receivedCommand) {
			case 0 : SalonModeChauff = "OFF"
			case 1 : SalonModeChauff = "ON"
			case 2 : SalonModeChauff = "CONF"
			case 3 : SalonModeChauff = "AUTO"
		}
		logInfo("TempManagerSalon", "We moved the mode to " + SalonModeChauff+". Temp is " + SalonTempSensor.state)
		TempSensorChanged.apply(SalonTempSwitch, SalonTempSensor, SalonModeChauff, TargetedTempSalon, "TempManagerSalon", HeaterTime)
end

rule "Mode Chauffage Chambre"
	when
		Item ChambreRadModeSwitch received command
	then
		switch(receivedCommand) {
			case 0 : ChambreModeChauff = "OFF"
			case 1 : ChambreModeChauff = "ON"
			case 2 : ChambreModeChauff = "CONF"
			case 3 : ChambreModeChauff = "AUTO"
		}
		logInfo("TempManagerChambre", "We moved the mode to " + ChambreModeChauff+". Temp is " + XiaomiAqaraTHPSensor_Temperature2.state)
		TempSensorChanged.apply(ChambreTempSwitch, XiaomiAqaraTHPSensor_Temperature2, ChambreModeChauff, TargetedTempChambre, "TempManagerChambre", HeaterTime)
		
end

rule "Mode Chauffage Bureau"
	when
		Item BureauRadModeSwitch received command
	then
		switch(receivedCommand) {
			case 0 : BureauModeChauff = "OFF"
			case 1 : BureauModeChauff = "ON"
			case 2 : BureauModeChauff = "CONF"
			case 3 : BureauModeChauff = "AUTO"
		}
		logInfo("TempManagerBureau", "We moved the mode to " + BureauModeChauff+". Temp is " + XiaomiAqaraTHPSensor_Temperature.state)
		TempSensorChanged.apply(BureauTempSwitch, XiaomiAqaraTHPSensor_Temperature, BureauModeChauff, TargetedTempBureau, "TempManagerBureau", HeaterTime)
		
end

rule "Mode Chauffage Sdb"
	when
		Item SdbRadModeSwitch received command
	then
		switch(receivedCommand) {
			case 0 : SdbModeChauff = "OFF"
			case 1 : SdbModeChauff = "ON"
			case 3 : SdbModeChauff = "AUTO"
		}
		logInfo("TempManagerSdb", "We moved the mode to " + SdbModeChauff+".")
		SdbHeaterChange.apply(SdbTempSwitch, SdbModeChauff, "TempManagerSdb",HeaterSdbTime)
		
end

rule "Mode Chauffage Ballon Eau chaude"
	when
		Item SdbBalModeSwitch received command
	then
		switch(receivedCommand) {
			case 0 : SdbBalModeChauff = "OFF"
			case 1 : SdbBalModeChauff = "ON"
			case 2 : SdbBalModeChauff = "CONF"
			case 3 : SdbBalModeChauff = "AUTO"
		}
		logInfo("TempManagerSdbBal", "We moved the mode to " + SdbBalModeChauff+".")
		SimpleChange.apply(SdbBalSwitch, SdbBalModeChauff, "TempManagerSdbBal")
		
end

rule "Check the time it's now"
    when
        Time cron "0 0/5 * * * ?"
    then
       	// Prepare the timer
        var int nAutoStartAM
        var int nAutoStopAM
        var int nAutoStartPM
        var int nAutoStopPM
        var int nSdbStartCamille
        var int nSdbStartAdrien
        var int nSdbLenght
		if(AutoStartAM.state instanceof DecimalType) {nAutoStartAM = (AutoStartAM.state as DecimalType).intValue()} else {nAutoStartAM = AutoStartAMInit}      
        if(AutoStopAM.state instanceof DecimalType) {nAutoStopAM = (AutoStopAM.state as DecimalType).intValue()} else {nAutoStopAM = AutoStopAMInit}        
        if(AutoStartPM.state instanceof DecimalType) {nAutoStartPM = (AutoStartPM.state as DecimalType).intValue()} else {nAutoStartPM = AutoStartPMInit}   
        if(AutoStopPM.state instanceof DecimalType) {nAutoStopPM = (AutoStopPM.state as DecimalType).intValue()} else {nAutoStopPM = AutoStopPMInit}        
		if(SdbStartCamille.state instanceof DecimalType) {nSdbStartCamille = (SdbStartCamille.state as DecimalType).intValue()} else {nSdbStartCamille = SdbStartCamilleInit} 
		if(SdbStartAdrien.state instanceof DecimalType) {nSdbStartAdrien = (SdbStartAdrien.state as DecimalType).intValue()} else {nSdbStartAdrien = SdbStartAdrienInit} 
		if(SdbLenght.state instanceof DecimalType) {nSdbLenght = (SdbLenght.state as DecimalType).intValue()} else {nSdbLenght = SdbLenghtInit} 
         
             
        var DateTime TimeDay = parse(now.getYear() + "-" + now.getMonthOfYear() + "-" + now.getDayOfMonth() + "T00:00")
        var DateTime StartTimeAM = TimeDay.plusHours(nAutoStartAM)
        var DateTime EndTimeAM = TimeDay.plusHours(nAutoStopAM)
        var DateTime StartTimePM = TimeDay.plusHours(nAutoStartPM)
        var DateTime EndTimePM = TimeDay.plusHours(nAutoStopPM)
        var DateTime StartSdbCamille = TimeDay.plusHours(nSdbStartCamille)
        var DateTime StopSdbCamille = StartSdbCamille.plusHours(nSdbLenght)
        var DateTime StartSdbAdrien = TimeDay.plusHours(nSdbStartAdrien)
        var DateTime StopSdbAdrien = StartSdbCamille.plusHours(nSdbLenght)
        
		// Detect which time slot we are right now
        if (EndTimePM.beforeNow) {
			logInfo("AutoManager", "It's super late.")
        	HeaterTime = 1       
        } else if (StartTimePM.beforeNow && EndTimePM.afterNow) {
			logInfo("AutoManager", "It's evening.")
        	HeaterTime = 2        	
        } else if (EndTimeAM.beforeNow && StartTimePM.afterNow) {
			logInfo("AutoManager", "It's after noon.")
    		HeaterTime = 3             	
        } else if (StartTimeAM.beforeNow && EndTimeAM.afterNow) {
			logInfo("AutoManager", "It's morning.")
        	HeaterTime = 2        	
        } else if (StartTimeAM.afterNow) {
			logInfo("AutoManager", "It's super early.")
        	HeaterTime = 1 	
        } else {
			logWarn("AutoManager", "Can't found the current hour action")
        }
        
        if (StartSdbCamille.beforeNow && StopSdbCamille.afterNow) {
			logInfo("AutoManager", "It's Sdb Camille Time.")
        	HeaterSdbTime = 1      	
        } else if (StartSdbAdrien.beforeNow && StopSdbAdrien.afterNow) {
			logInfo("AutoManager", "It's Sdb Adrien Time.")
    		HeaterSdbTime = 1          	
        } else {
		logInfo("AutoManager", "It's NOT Sdb Time.")
        	HeaterSdbTime = 0
        }
		SdbHeaterChange.apply(SdbTempSwitch, SdbModeChauff, "TempManagerSdb",HeaterSdbTime)
		
	    var Number MaxMoveSensor1 = SalonMoveSensor.maximumSince(now.minusMinutes(5)).state as DecimalType
	    var Number MaxMoveSensorBis = SalonMoveSensor.maximumSince(now.minusHours(2)).state as DecimalType
	    var Number MaxMoveSensor2 = SalonMoveSensor.maximumSince(now.minusHours(3)).state as DecimalType
		logInfo("AutoManager", "Timeout for LED:"+MaxMoveSensor1+" TV:"+MaxMoveSensorBis+" Bureau:"+MaxMoveSensor2)
	    if (MaxMoveSensor1 == 0) {
			if(XiaomiMiSmartHomeGateway_Brightness.state != 99){
		    	sendCommand("XiaomiMiSmartHomeGateway_Brightness", "0")
		    }
	    }
	    if (MaxMoveSensorBis == 0) {
	    	ZWaveNode5FGWP102MeteredWallPlugSwitch_Switch.sendCommand(OFF)
	    }
	    if (MaxMoveSensor2 == 0) {
	   		ZWaveNode6FGWP102MeteredWallPlugSwitch_Switch.sendCommand(OFF)
	    }	    
	
end

rule "Store the daily conso"
    when
        Time cron "0 0 0 * * ?"
    then
    	postUpdate(AppartHPConso, AppartHPSensor.deltaSince(now.minusHours(24)) as Number)
		postUpdate(AppartHCConso, AppartHCSensor.deltaSince(now.minusHours(24)) as Number)		
end


rule "Check ballon state"
    when
        Time cron "0 0 * * * ?"
    then
    	logInfo("Reset Ballon", "Force On/Off on Ballon: "+ SdbBalSwitch.state)
		if (SdbBalModeChauff == "ON") {
			sendCommand(SdbBalSwitch,"ON")
		} else {
			sendCommand(SdbBalSwitch,"OFF")	
		}
		if (now.getHourOfDay()==23 || now.getHourOfDay()<5)
		{
			var Number MaxMConso = AppartConsoSensor.maximumSince(now.minusMinutes(30)).state as DecimalType
		    if (MaxMConso > 2200) {
		    	logInfo("Reset Ballon", "Found more than "+MaxMConso+" / 2200")
	    		SdbBalReport.postUpdate(1)
	    	} else {
		    	logInfo("Reset Ballon", "Found less than "+MaxMConso+" / 2200")
	    		SdbBalReport.postUpdate(0)    		
	    	}	    	
    	}
end

rule "Master alarm time"
when
	Item Alarm_MasterTimeMins received update
then
	var int minutes = (Alarm_MasterTimeMins.state as DecimalType).intValue()

	if (masterAlarmTime !== null)
		masterAlarmTime.cancel()

	// work out when the alarm is to fire - start from midnight
	var DateTime alarmTime = parse(now.getYear() + "-" + now.getMonthOfYear() + "-" + now.getDayOfMonth() + "T00:00")

	// add the number of minutes selected
	alarmTime = alarmTime.plusDays(minutes)

	// create a timer to execute the alarm at the specified time
	masterAlarmTime = createTimer(alarmTime) [| 
		if (Alarm_Master.state == ON) 
			Alarm_MasterEvent.sendCommand(ON)
	]

	// update the alarm display time    
	Alarm_MasterTime.sendCommand(String::format("%02d", alarmTime.getDayOfMonth()))
end

rule "Mode Alarm_Master"
	when
		Item Alarm_Master received command
	then
		switch(receivedCommand) {
			case OFF :
			{
				logInfo("VacanceManager", "Turned OFF Vacance Mode since it got disabled")
				postUpdate(SalonRadModeSwitch, 2)
				SalonModeChauff = "CONF"
				postUpdate(ChambreRadModeSwitch, 2)
				ChambreModeChauff = "CONF"
				postUpdate(BureauRadModeSwitch, 2)	
				BureauModeChauff = "CONF"
				postUpdate(SdbRadModeSwitch, 3)	
				SdbModeChauff = "AUTO"
				postUpdate(SdbBalModeSwitch, 1)	
				SdbBalModeChauff = "ON"
				if (masterAlarmTime !== null) {masterAlarmTime.cancel()}
			}
			case ON : 
			{
				postUpdate(SalonRadModeSwitch, 0)
				SalonModeChauff = "OFF"
				postUpdate(ChambreRadModeSwitch, 0)
				ChambreModeChauff = "OFF"
				postUpdate(BureauRadModeSwitch, 0)	
				BureauModeChauff = "OFF"
				postUpdate(SdbRadModeSwitch, 0)	
				SdbModeChauff = "OFF"
				postUpdate(SdbBalModeSwitch, 0)
				SdbBalModeChauff = "OFF"		
				
				// work out when the alarm is to fire - start from midnight
				var DateTime alarmTime = parse(now.getYear() + "-" + now.getMonthOfYear() + "-" + now.getDayOfMonth() + "T00:00")
			
				// add the number of minutes selected
				var int minutes = (Alarm_MasterTimeMins.state as DecimalType).intValue()
				alarmTime = alarmTime.plusDays(minutes)

				// update the alarm display time    
				Alarm_MasterTime.sendCommand(String::format("%02d", alarmTime.getDayOfMonth()))
				

				logInfo("VacanceManager", "Turned ON Vacance Mode for day "+ minutes)

				if (masterAlarmTime !== null)
					masterAlarmTime.cancel()
				
				// create a timer to execute the alarm at the specified time
				masterAlarmTime = createTimer(now.plusDays(minutes)) [| 
					if (Alarm_Master.state == ON) 
						Alarm_MasterEvent.sendCommand(ON)
				]							
			}
		}
end


rule "Master bedroom alarm"
when
	Item Alarm_MasterEvent received command ON
then
	logInfo("VacanceManager", "Turned OFF Vacance Mode since we reach the return date")
	postUpdate(SalonRadModeSwitch, 2)
	SalonModeChauff = "CONF"
	postUpdate(ChambreRadModeSwitch, 2)
	ChambreModeChauff = "CONF"
	postUpdate(BureauRadModeSwitch, 2)	
	BureauModeChauff = "CONF"
	postUpdate(SdbRadModeSwitch, 3)	
	SdbModeChauff = "AUTO"
	postUpdate(SdbBalModeSwitch, 1)	
	SdbBalModeChauff = "ON"
	Alarm_Master.sendCommand(OFF)
	// do your alarm stuff - turn on radio, dim up lights, start the coffee machine...
end


rule "Xiaomi Switch"
when
    Channel "mihome:sensor_switch_aq2:158d0002133fce:button" triggered
then
    var actionName = receivedEvent.getEvent() //"SHORT_PRESSED" //
    switch(actionName) 
    {
        case "SHORT_PRESSED": 
        {
        	logInfo("XiaomiSwitch", "SHORT_PRESSED B1 Begin")
        	sendCommand("XiaomiMiSmartHomeGateway_Color", "0,100,50") // HSL
        	sendCommand("XiaomiMiSmartHomeGateway_Brightness", "99")      	
			postUpdate(BureauRadModeSwitch, 1)	
			BureauModeChauff = "ON"
			postUpdate(SdbRadModeSwitch, 1)	
			SdbModeChauff = "ON"
			sendCommand(BureauTempSwitch,"ON")
        	sendCommand(SdbTempSwitch,"ON")
        	
    	    timerHeat = createTimer(now.plusMinutes(20)) [|
        		sendCommand("XiaomiMiSmartHomeGateway_Color", "120,100,50") // HSL
				logInfo("XiaomiSwitch", "SHORT_PRESSED B1 Middle")
				timerHeat = null

				 timerHeat = createTimer(now.plusMinutes(30)) [|
					postUpdate(BureauRadModeSwitch, 2)	
					BureauModeChauff = "CONF"
					postUpdate(SdbRadModeSwitch, 3)	
					SdbModeChauff = "AUTO"
					sendCommand(BureauTempSwitch,"OFF")
					sendCommand(SdbTempSwitch,"OFF")
					sendCommand("XiaomiMiSmartHomeGateway_Brightness", "0")
					logInfo("XiaomiSwitch", "SHORT_PRESSED B1 End")
					timerHeat = null
				]
    		]
        	
	        	
		    //sendCommand("XiaomiMiSmartHomeGateway_SoundVolume", "3")
		    //sendCommand("XiaomiMiSmartHomeGateway_SoundSelector", "2")
		    //Thread::sleep(10000)
		    //sendCommand("XiaomiMiSmartHomeGateway_SoundSelector", "10000")
		    //sendCommand("XiaomiMiSmartHomeGateway_SoundVolume", "0")

        }
        case "DOUBLE_PRESSED": 
        {
        	logInfo("XiaomiSwitch", "DOUBLE_PRESSED B1")
			postUpdate(BureauRadModeSwitch, 2)	
			BureauModeChauff = "CONF"
			postUpdate(SdbRadModeSwitch, 3)	
			SdbModeChauff = "AUTO"
			sendCommand(BureauTempSwitch,"OFF")
        	sendCommand(SdbTempSwitch,"OFF")
        	sendCommand("XiaomiMiSmartHomeGateway_Brightness", "0")
        	timerHeat = null
        }
        case "LONG_PRESSED": 
        {
        	logInfo("XiaomiSwitch", "LONG_PRESSED B1")
			postUpdate(BureauRadModeSwitch, 2)	
			BureauModeChauff = "CONF"
			postUpdate(SdbRadModeSwitch, 3)	
			SdbModeChauff = "AUTO"
			sendCommand(BureauTempSwitch,"OFF")
        	sendCommand(SdbTempSwitch,"OFF")
        	sendCommand("XiaomiMiSmartHomeGateway_Brightness", "0")
        	timerHeat = null
        }
    }
end

